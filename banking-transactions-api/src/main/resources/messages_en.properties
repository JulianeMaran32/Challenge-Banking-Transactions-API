# Validation Messages (Bean Validation)
transaction.accountNumber.notBlank=Account number cannot be blank.
transaction.amount.notNull=Transaction amount cannot be null.
transaction.amount.decimalMin=Transaction amount must be positive.
transaction.type.notNull=Transaction type cannot be null.
# Log Messages (used with SLF4J)
log.transaction.batch.processing=Processing batch of {} transactions.
log.transaction.batch.empty.null=Received empty or null transaction batch.
log.transaction.batch.completed=Transaction batch completed.
log.transaction.processing.start=Starting transaction processing for account {}.
log.account.fetching.locking=Fetching and locking account: {}.
log.account.applying.operation=Applying operation {} of {} on account {}.
log.account.saving=Saving account {}.
log.transaction.processed.success=Transaction successfully processed for account {}. New balance: {}.
log.account.balance.fetching=Fetching balance for account: {}.
log.account.balance.found=Account found when fetching balance for {}. Balance: {}.
log.initialization.start=Starting data initialization...
log.initialization.attempt.create=Attempting to create account if not exists: {}.
log.account.created=Account '{}' successfully created with initial balance: {}.
log.account.exists=Account '{}' already exists. Skipping creation.
log.initialization.error.save=Error saving account '{}' during initialization: {}.
log.initialization.completed=Data initialization completed.
log.controller.transaction.received=Received request to perform transactions. Count: {}.
log.controller.transaction.success=Transactions processed successfully.
log.controller.balance.received=Received request to get balance for account: {}.
log.controller.balance.returned=Balance for account {} returned: {}.
log.error.specific.transaction=Specific error processing transaction for account {}: {}.
log.error.unexpected.transaction=Unexpected error processing transaction for account {}: {}.
log.error.account.notfound.warning=Account not found: {} - Path: {}.
log.error.insufficient.funds.warning=Insufficient funds: {} - Path: {}.
log.error.illegal.argument.warning=Illegal Argument / Unprocessable Entity: {} - Path: {}.
log.error.data.integrity.violation.warning=Data integrity violation: {} - Path: {}.
log.error.validation.warning=Validation errors: {} - Path: {}.
log.error.type.mismatch.warning=Parameter type mismatch: {} - Path: {}.
log.error.bad.request.generic.warning=Invalid request: {} - Path: {}.
log.error.internal.unexpected.error=An unexpected error occurred: {} - Path: {}.
# Exception Messages (translated in GlobalExceptionHandler or used directly)
# Note: {0}, {1} etc. are placeholders for arguments
# Domain/Application exceptions (thrown with simple messages, translated by handler)
exception.account.notFound=Account not found: {0}
exception.insufficient.funds=Insufficient funds in account {0} to debit {1}
# IllegalArgumentExceptions thrown directly (handled by content in handler)
exception.illegal.argument.creditAmountNull=Credit amount cannot be null.
exception.illegal.argument.creditAmountPositive=Credit amount must be positive.
exception.illegal.argument.debitAmountNull=Debit amount cannot be null.
exception.illegal.argument.debitAmountPositive=Debit amount must be positive.
exception.illegal.argument.transactionTypeNull=Transaction type not specified.
exception.illegal.argument.transactionTypeInvalid=Invalid transaction type.
# etc. for all messages in Objects.requireNonNull and other new IllegalArgumentException
# Generic or specific messages from GlobalExceptionHandler (use MessageSource)
error.validation.message=Validation errors: {0}
error.type.mismatch.message=Parameter '{0}' with invalid type. Received value: '{1}'
error.bad.request.generic=Invalid request.
error.data.integrity.violation.generic=Data integrity violation. Possible duplicate resource or conflict.
error.data.integrity.violation.unique=Duplicate resource. Please check the provided data.
error.internal.server.generic=An internal server error occurred. Please try again later.
error.internal.transaction.processing=An internal error occurred while processing the transaction for account {0}.
# Objects.requireNonNull messages
validation.notNull.transaction=Transaction cannot be null.
validation.notNull.accountNumber=Account number cannot be null.
validation.notNull.initialBalance=Initial balance cannot be null.
validation.notNull.creditAmount=Credit amount cannot be null.
validation.notNull.debitAmount=Debit amount cannot be null.
validation.notNull.account=Account cannot be null.
validation.notNull.amount=Amount cannot be null.
validation.notNull.type=Type cannot be null.
validation.notNull.accountMapper=Account entity cannot be null for mapping.